{"version":3,"sources":["../../../../assets/Script/assets/Script/Navigator.js"],"names":["logger","require","getLogger","navigatorMode","New","Back","Refresh","Navigator","info","_allState","Map","_scenesStack","_sceneLaunchHandle","cc","director","on","Director","EVENT_AFTER_SCENE_LAUNCH","eventCustom","sceneName","detail","name","level","sceneStackLevel","goBackToSceneStackLevel","handleForward","bind","parameter","onSceneLaunched","log","argsLength","arguments","length","undefined","readyToLeaveSceneJS","getCurrentSceneJS","sceneKey","sceneState","get","state","saveState","call","loadScene","pop","handleBack","push","enterSceneJS","loadState","nextSceneKey","nextSceneIndex","delete","set","currentScene","getScene","currentCanvas","getChildByName","currentCustomJS","getComponent","locScenesStack","c","current","currentSceneName","handleRefresh","i","exist","module","exports","NavigatorMode","getNavigator"],"mappings":"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","file":"Navigator.js","sourceRoot":"../../../../assets/Script","sourcesContent":["'use strict';\n\nconst logger = require('Logger').getLogger('Navigator.js');\n\n/**\n * 导航模式\n * @type {{New: number, Back: number, Refresh: number}}\n */\nconst navigatorMode = {\n    New: 0,\n    Back: 1,\n    Refresh: 2\n};\n\n/**\n * Navigator介绍:\n * ------------------------\n * 提供一个支持导航栈的Navigator类，支持以下特性\n * 0，记录场景切换的导航栈。\n * 1，场景之间可以传递参数，比如场景A要传个字符串给场景B。\n * 2，多个场景进入同一场景后，从场景返回前一个场景，不需要再判断前一个场景，可以直接goBack返回。\n * 3，支持场景返回后页面数据恢复，比如场景A界面，输入框输入了一段文字，然后进入场景B，\n *    从场景B返回后可以恢复输入框文字(需要在场景A脚本实现固定接口支持)。\n *\n * Navigator使用方法:\n * ------------------------\n * a)在场景A向前加载新场景B[带参数][带回调]\n *   /// 默认\n *   navigator.navigate('B');\n *\n *   /// [带参数]\n *   let parameter = {};\n *   parameter.title = 'i am wang ronghui';\n *   navigator.navigate('B', parameter);\n *\n *   /// [带回调]\n *   navigator.navigate('B', function(scene){\n *      /// 切换成功处理\n *   });\n *\n *   /// [带参数] + [带回调]\n *   let parameter = {};\n *   parameter.title = 'i am wang ronghui';\n *   navigator.navigate('B', parameter, function(scene){\n *      /// 切换成功处理\n *   });\n *\n *   ~如果有传递parameter需在相应B.js内部实现loadState(navigatorMode, parameter, state)函数接收参数parameter。\n *   ~如果要存储当前UI状态则实现saveState(state){ //将UI状态存储在参数state中,后续在loadState里恢复state }。\n *\n * c)场景B向后返回前一个场景A\n *   /// 默认\n *   navigator.goBack();\n *\n *   /// [带参数]\n *   let parameter = {};\n *   parameter.title = 'i am wang ronghui';\n *   navigator.goBack(parameter);\n *\n * d)场景B向后返回指定名字场景A\n *   /// 默认\n *   navigator.goBackToScene('A');\n *\n *   /// [带参数]\n *   let parameter = {};\n *   parameter.title = 'i am wang ronghui';\n *   navigator.goBackToScene('A', parameter);\n *\n * e)场景B向后返回根场景\n *   /// 默认\n *   navigator.goBackToRootScene();\n *\n *   /// [带参数]\n *   let parameter = {};\n *   parameter.title = 'i am wang ronghui';\n *   navigator.goBackToRootScene(parameter);\n *\n * 注意事项:\n * ------------------------\n * 挂载到场景的Canvas的自定义脚本的名字，必须要和场景文件的名字一致，否则无法调用到loadState或者saveState\n *\n */\nclass Navigator\n{\n    /**\n     * 构造方法\n     */\n    constructor(){\n        logger.info('constructor');\n\n        this._allState = new Map();\n        this._scenesStack = [];\n        this._sceneLaunchHandle = false;\n\n        /*\n        *  支持外部使用cc.director.loadScene直接导航，记录下导航栈\n        */\n        cc.director.on(cc.Director.EVENT_AFTER_SCENE_LAUNCH, function (eventCustom) {\n            /// 内部处理了这里就忽略，这里仅为支持监听外部导航。\n            if(this._sceneLaunchHandle) {\n                this._sceneLaunchHandle = false;\n                return;\n            }\n\n            /// 获取当前场景\n            let sceneName = eventCustom.detail.name;\n            logger.info('EVENT_AFTER_SCENE_LAUNCH sceneName = ' + sceneName);\n\n            /// 先检查下导航栈有没有该场景，如果有，则回退到相应场景，防止出现场景循环\n            let level = this.sceneStackLevel(sceneName);\n            if(level !== -1){\n                this.goBackToSceneStackLevel(level, null);\n                return;\n            }\n\n            this.handleForward(sceneName, null);\n        }.bind(this));\n    }\n\n    /**\n     * 向前加载sceneName场景\n     * @param {string} sceneName -场景名字\n     * @param {object} [parameter] -参数对象\n     * @param {function()} [onSceneLaunched] -新场景运行成功后回调\n     */\n    navigate(sceneName, parameter, onSceneLaunched){\n        logger.info('navigate sceneName = ' + sceneName);\n        logger.log('navigate parameter = ' + parameter);\n        logger.log('navigate onSceneLaunched = ' + onSceneLaunched);\n\n        /// 可能parameter和onSceneLaunched只传了某一个\n        let argsLength = arguments.length;\n        if(argsLength === 2) {\n            if (typeof parameter === 'function') {\n                onSceneLaunched = parameter;\n                parameter = undefined;\n            }\n        }\n\n        /// 先检查下导航栈有没有该场景，如果有，则回退到相应场景，防止出现场景循环\n        let level = this.sceneStackLevel(sceneName);\n        if(level !== -1){\n            this.goBackToSceneStackLevel(level, parameter);\n            return;\n        }\n\n        let readyToLeaveSceneJS = this.getCurrentSceneJS();\n        if(readyToLeaveSceneJS){\n            let sceneKey = 'Scene-' + this._scenesStack.length;\n            let sceneState = this._allState.get(sceneKey);\n            let state = {};\n            sceneState.state = state;\n\n            if(typeof readyToLeaveSceneJS.saveState === 'function'){\n                readyToLeaveSceneJS.saveState.call(readyToLeaveSceneJS, state);\n            }\n        }\n\n        cc.director.loadScene(sceneName, function () {\n            /// 加载新场景成功处理\n            logger.log('navigate loadScene complete sceneName = ' + sceneName);\n\n            this._sceneLaunchHandle = true;\n            this.handleForward(sceneName, parameter);\n\n            /// 回调通知场景切换成功\n            if(onSceneLaunched){\n                onSceneLaunched();\n            }\n        }.bind(this));\n\n        logger.log('navigate end');\n    }\n\n    /**\n     * 向后返回前一个场景\n     * @param {object} [parameter] -参数对象\n     */\n    goBack(parameter){\n        logger.log('goBack');\n\n        /// 当前Scene出导航栈\n        this._scenesStack.pop();\n\n        /// 加载栈顶Scene\n        let sceneName = this._scenesStack[this._scenesStack.length - 1];\n        logger.info('goBack to sceneName = ' + sceneName);\n        cc.director.loadScene(sceneName, function () {\n            logger.log('goBack loadScene complete sceneName = ' + sceneName);\n\n            this._sceneLaunchHandle = true;\n            this.handleBack(parameter);\n        }.bind(this));\n    }\n\n    /**\n     * 向后返回前根场景\n     * @param {object} [parameter] -参数对象\n     */\n    goBackToRootScene(parameter){\n        logger.log('goBackToRootScene');\n\n        this.goBackToSceneStackLevel(1, parameter);\n    }\n\n    /**\n     * 向后返回指定场景\n     * @param {string} sceneName -场景名字\n     * @param {object} [parameter] -参数对象\n     */\n    goBackToScene(sceneName, parameter){\n        logger.log('goBackToScene sceneName = ' + sceneName);\n\n        let level = this.sceneStackLevel(sceneName);\n\n        if(level !== -1){\n            this.goBackToSceneStackLevel(level, parameter);\n        }\n    }\n\n\n    /*-------------------------私有方法begin-------------------------*/\n\n    /**\n     * 前进页面处理，加入导航栈，分配state\n     * @param {string} sceneName -场景名字\n     * @param {object} [parameter] -参数对象\n     */\n    handleForward(sceneName, parameter){\n        logger.info('handleForward sceneName = ' + sceneName);\n        logger.info('handleForward parameter = ' + parameter);\n\n        /// 0，入导航栈\n        if(sceneName){\n            this._scenesStack.push(sceneName);\n        }\n\n        /// 加载新场景成功处理\n        let enterSceneJS = this.getCurrentSceneJS();\n        if(enterSceneJS){\n            /// 向前导航时只有parameter，没有页面状态，所以页面状态为null\n            if(typeof enterSceneJS.loadState === 'function'){\n                enterSceneJS.loadState.call(enterSceneJS, navigatorMode.New, parameter, null);\n            }\n\n            /// 1，由于后退时不清理状态，在这里将当前页面以及向前所有的状态清除\n            let nextSceneKey =  'Scene-' + this._scenesStack.length;\n            let nextSceneIndex = this._scenesStack.length;\n            while (this._allState.delete(nextSceneKey))\n            {\n                nextSceneIndex ++;\n                nextSceneKey = 'Scene-' + nextSceneIndex;\n            }\n\n            /// 2，设置个state给当前Scene\n            let sceneState = {};\n            let sceneKey = 'Scene-' + this._scenesStack.length;\n            logger.log('handleForward sceneKey = ' + sceneKey);\n            this._allState.set(sceneKey, sceneState);\n\n            /// 3，记录下参数\n            parameter = parameter || {};\n            sceneState.parameter = parameter;\n            sceneState.state = {};\n        }\n    }\n\n    /**\n     * 后退页面处理，恢复场景\n     * @param {object} [parameter] -参数对象\n     */\n    handleBack(parameter){\n        logger.info('handleBack');\n\n        /// 加载新场景成功处理\n        let enterSceneJS = this.getCurrentSceneJS();\n        if(enterSceneJS){\n            let sceneKey = 'Scene-' + this._scenesStack.length;\n            logger.log('handleBack sceneKey = ' + sceneKey);\n            let sceneState = this._allState.get(sceneKey);\n\n            /// 获取参数和页面状态，传入场景js,用于场景页面恢复\n            if(typeof enterSceneJS.loadState === 'function'){\n                /// 如果Back有带参数，优先使用参数，否则使用保留参数。\n                parameter = parameter || sceneState.parameter;\n                enterSceneJS.loadState.call(enterSceneJS, navigatorMode.Back, parameter, sceneState.state);\n            }\n        }\n    }\n\n    /**\n     * 刷新页面处理\n     * @param {object} [parameter] -参数对象\n     */\n    handleRefresh(parameter){\n        logger.info('handleRefresh');\n\n        let enterSceneJS = this.getCurrentSceneJS();\n        if(enterSceneJS){\n            if(typeof enterSceneJS.loadState === 'function'){\n                enterSceneJS.loadState.call(enterSceneJS, navigatorMode.Refresh, parameter, null);\n            }\n        }\n    }\n\n    /**\n     * 获取当前场景脚本类\n     */\n    getCurrentSceneJS(){\n        let currentScene = cc.director.getScene();\n        if(currentScene){\n            let currentCanvas = currentScene.getChildByName('Canvas');\n            if(currentCanvas){\n                let currentCustomJS = currentCanvas.getComponent(currentScene.name);\n                if(currentCustomJS){\n                    return currentCustomJS;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * 返回到固定Level的场景\n     * @param {number} level -层级，比如1代表第一层\n     * @param {object} [parameter] -参数对象\n     */\n    goBackToSceneStackLevel(level, parameter){\n        logger.info('goBackToSceneStackLevel');\n\n        let locScenesStack = this._scenesStack;\n        let c = locScenesStack.length;\n\n        if (c === 0) {\n            return;\n        }\n\n        // current level or lower -> nothing\n        if (level > c)\n            return;\n\n        // pop stack until reaching desired level\n        while (c > level) {\n            let current = locScenesStack.pop();\n            c--;\n        }\n\n        let sceneName = locScenesStack[locScenesStack.length - 1];\n        logger.info('goBackToSceneStackLevel sceneName = ' + sceneName);\n\n        let currentSceneName = cc.director.getScene().name;\n        logger.info('goBackToSceneStackLevel currentSceneName = ' + currentSceneName);\n\n        if(currentSceneName !== sceneName){\n            /// 加载栈顶Scene\n            cc.director.loadScene(sceneName, function () {\n                logger.log('goBackToSceneStackLevel loadScene complete sceneName = ' + sceneName);\n\n                this._sceneLaunchHandle = true;\n                this.handleBack(parameter);\n            }.bind(this));\n        }else {\n            this.handleRefresh(parameter);\n        }\n    }\n\n    /**\n     * 获取指定scene名字的导航栈层级\n     * @param {string} sceneName -场景名字\n     */\n    sceneStackLevel(sceneName){\n        logger.log('sceneStackLevel sceneName = ' + sceneName);\n\n        let locScenesStack = this._scenesStack;\n\n        let i = locScenesStack.length-1;\n        let exist = false;\n        for(; i>=0; --i){\n            if(locScenesStack[i] === sceneName){\n                exist = true;\n                break;\n            }\n        }\n\n        logger.log('sceneStackLevel i = ' + i);\n\n        if(exist){\n            return i+1;\n        }\n\n        return -1;\n    }\n    /*-------------------------私有方法end-------------------------*/\n}\n\nmodule.exports = {\n    /**\n     * 导航模式\n     */\n    NavigatorMode: navigatorMode,\n\n    /**\n     * get Navigator\n     * @returns {Navigator}\n     */\n    getNavigator: function(){\n        return new Navigator();\n    }\n};\n"]}